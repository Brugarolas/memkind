Backlog
=======

Testing
-------
    * Test with more BIOS configurations.

    * Need to test GB pages on a range of kernel versions.

    * More robust tests for out of memory and spill over conditions.

    * Need to more carefully split out tests based on requirements,
      and run those cases supported by the system.  Examples include
      kernel version greater than 3.11, sufficient 2 MB pages in
      hugetlbfs, and support for 1 GB pages.

    * Need to expand performance testing significantly.

    * Add more tests for memkind_check_available().

Documentation
-------------
    * Better documentation for how NULL pointers in ops structure are
      handled.

    * Document the hbwmalloc::hbwmalloc_allocator C++ standard
      allocator and add an example that uses it.

Features
--------
    * Add gcc malloc hooks for hbwmalloc interface.
      http://www.gnu.org/software/libc/manual/html_node/Hooks-for-Malloc.html

    * Add asynchronous duplicate API's for conversion from one kind to
      another:
          int memkind_dup_async(memkind_t kind, void *orig, size_t size,
                                void **copy, void **lock);
          int memkind_wait(void *lock);
          int memkind_check(void *lock);

    * Investigate support for overloading the C++ new operator and the
      C++11 alignas() mark up.

    * Extend huge page support using libhugetlbfs.

    * Support for non-standard x86 page sizes like 128 MB.

    * Support for verbose mode by setting environment variable which
      will log debug diagnostic information.

    * Use atexit() rather than __attribute__((destructor)) to support
      compilers other than gcc.

    * Add a kind of memory which allocates to low bandwidth nodes.
      This would be the inverse of the node mask used for high
      bandwidth nodes, and would be useful in conjunction with numactl
      to put default allocations, the stack and globals in high
      bandwidth memory while selectively allocating some heap
      variables in low bandwidth memory.

    * Enable inspection of the kind of memory from virtual address of
      the allocation for external libraries to benefit.

Issues
------
    * Error message when starting memkind service after it is already
      started is very cryptic.

    * The supporting jemalloc library is a fork of version 3.5.1.
      Need to rebase changes for supporting memkind to the head of
      jeamlloc's dev branch.  Since version 3.6.0 uses arenas for huge
      allocations, this will simplify the modifications required to
      enable memkind.

      Two two concerns about merging to head of jemalloc dev branch.
          + Free pool for huge allocations is not shared between
            threads.
          + New jemalloc feature for user defined chunk allocator does
            not use the jemalloc recycling algorithm.  This seems to
            be the intended way for customizing the mmap() call, but
            requires user to implement chunk recycling.

    * The default implementation of the memkind_get_size() API is a
      thin wrapper around numa_node_size64() which means that it
      cannot account for the memory available in the recycling pool
      for each kind.  Performance of memkind_get_size() is also an
      issue.

    * Weak symbols are different in Mac OS-X which uses weak_import,
      no weak. The only other issue is we are not allowed to have a
      strong symbol for one that is declared as weak (this is not a
      concern for us). Basically we need a different attribute for
      weak symbols on Mac OSX, weak_import instead of weak.

    * Check the OS version and report issues.  The library should not
      run into error conditions on OS versions that do not support our
      library (at least warn the user during installation).

    * In case where /var/run/memkind/node-bandwith is absent, and
      MEMKIND_HBW_NODES is not defined, use MPOL_INTERLEAVED across
      all NUMA nodes rather than erroring out.

    * Remove the implicit dependency on the openMP runtime from the
      memkind library. Although the tests and examples use openMP, the
      memkind library itself should not identify libgomp.so as a
      dependency when running readelf -d on libmemkind.so.  This is a
      build issue.

    * PMTT parser does not properly handle empty memory controllers.

    * readelf -d libmemkind.so lists libgomp.so as a dependency, but
      this library is only required for tests

