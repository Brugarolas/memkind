Backlog
=======

Testing
-------
    * Test with more BIOS configurations.

    * Need to test GB pages on a range of kernel versions.

    * More robust tests for out of memory and spill over conditions.

    * Need to more carefully split out tests based on requirements,
      and run those cases supported by the system.  Examples include
      kernel version greater than 3.11, sufficient 2 MB pages in
      hugetlbfs, and support for 1 GB pages.

    * Need to expand performance testing significantly.

Documentation
-------------
    * Better documentation for how NULL pointers in ops structure are
      handled.

    * Provide an architectural overview document.

Features
--------
    * Add gcc malloc hooks for hbwmalloc interface.
      http://www.gnu.org/software/libc/manual/html_node/Hooks-for-Malloc.html

    * Add asynchronous duplicate API's for conversion from one kind to
      another:
          int memkind_dup_async(memkind_t kind, void *orig, size_t size,
                                void **copy, void **lock);
          int memkind_wait(void *lock);
          int memkind_check(void *lock);

    * Extend huge page support using libhugetlbfs.

    * Support for non-standard x86 page sizes like 128 MB.

    * Support for verbose mode by setting environment variable which
      will log debug diagnostic information.

    * Use atexit() rather than __attribute__((destructor)) to support
      compilers other than gcc.

Issues
------
    * Error message when starting memkind service after it is already
      started is very cryptic.

    * The supporting jemalloc library is a fork of version 3.5.1.
      Need to rebase changes for supporting memkind to the head of
      jeamlloc's dev branch.  Since version 3.6.0 uses arenas for huge
      allocations, this will simplify the modifications required to
      enable memkind.

      Two two concerns about merging to head of jemalloc dev branch.
          + Free pool for huge allocations is not shared between
            threads.
          + New jemalloc feature for user defined chunk allocator does
            not use the jemalloc recycling algorithm.  This seems to
            be the intended way for customizing the mmap() call, but
            requires user to implement chunk recycling.

    * The default implementation of the memkind_get_size() API is a
      thin wrapper around numa_node_size64() which means that it
      cannot account for the memory available in the recycling pool
      for each kind.  Performance of memkind_get_size() is also an
      issue.
