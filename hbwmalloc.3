.\"  Copyright (2014) Intel Corporation All Rights Reserved.
.\"
.\"  This software is supplied under the terms of a license
.\"  agreement or nondisclosure agreement with Intel Corp.
.\"  and may not be copied or disclosed except in accordance
.\"  with the terms of that agreement.
.\"
.TH "HBWMALLOC" 3 "8 May 2014" "Intel Corporation" "HBWMALLOC" \" -*- nroff -*-
.SH "NAME"
hbwmalloc \- The high bandwidth memory interface
.SH "SYNOPSIS"
.nf
.B #include <hbwmalloc.h>
.sp
.B Link with -ljemalloc -lnuma -lnumakind -lpthread
.sp
.BI "void* hbw_calloc(size_t " "nmemb" ", size_t " "size" );
.br
.BI "void* hbw_malloc(size_t " "size" );
.br
.BI "void hbw_free(void " "*ptr" );
.br
.BI "void* hbw_realloc (void " "*ptr" ", size_t " "size" );
.br
.BI "int hbw_allocate_memalign(void " "**memptr" ", size_t " "alignment" ", size_t " "size" );
.br
.BI "int hbw_allocate_memalign_psize(void " "**memptr" ", size_t " "alignment" ", size_t " "size" ", int " "pagesize" );
.br
.B int hbw_is_available(void);
.br
.B int hbw_get_policy(void);
.br
.BI "void hbw_set_policy(int " "mode" );
.fi
.SH "DESCRIPTION"
.BR hbw_calloc ()
allocates high bandwidth memory for an array of
.I nmemb
elements of
.I size
bytes each and returns a pointer to the allocated memory.
The memory is set to zero.
If
.I nmemb
or
.I size
is 0, then
.BR hbw_calloc ()
returns NULL.
.PP
.BR hbw_malloc ()
allocates
.I size
bytes of high bandwidth memory and returns a pointer to the allocated memory.
The memory is not cleared.
If
.I size
is 0, then
.BR hbw_malloc ()
returns  NULL.
.PP
.BR hbw_free ()
frees the memory space pointed to by
.IR ptr ,
which must have been returned by a previous call to
.BR hbw_malloc (),
.BR hbw_calloc (),
.BR hbw_realloc (),
.BR hbw_allocate_memalign (),
or
.BR hbw_allocate_memalign_psize ().
Otherwise, or if
.I hbw_free(ptr)
has already been called before, undefined behavior occurs.
If
.I ptr
is  NULL, no operation is performed.
.PP
.BR hbw_realloc ()
changes the size of the memory block pointed to by
.I ptr
to
.I size
bytes using high bandwidth memory.
The contents will be unchanged to the minimum of the old and new sizes;
newly allocated memory will be uninitialized.
If
.I ptr
is NULL, then the call is equivalent to
.IR hbw_malloc(size) ,
for all values of
.IR size ;
if
.I size
is equal to zero,
and
.I ptr
is not NULL, then the call is equivalent to
.IR hbw_free(ptr) .
Unless
.I ptr
is NULL, it must have been returned by an earlier call to
.BR hbw_malloc (),
.BR hbw_calloc (),
.BR hbw_realloc (),
.BR hbw_allocate_memalign (),
or
.BR hbw_allocate_memalign_psize ().
If the area pointed to was moved, a
.I hbw_free(ptr)
is done.
.PP
.BR hbw_allocate_memalign ()
allocates
.I size
bytes of high bandwidth memory and places the address of
the allocated memory in
.IR "*memptr" .
The address of the allocated memory will be a multiple of
.IR "alignment" ,
which must be a power of two and a multiple of
.IR "sizeof(void *)".
If
.I size
is 0, then
.BR hbw_allocate_memalign ()
returns NULL.
.PP
.BR hbw_allocate_memalign_psize ()
allocates
.I size
bytes of high bandwidth memory and places the address of the allocated
memory in
.IR "*memptr" .
The address of the allocated memory will be a multiple of
.IR "alignment" ,
which must be a power of two and a multiple of
.IR "sizeof(void *)".
If
.I size
is 0, then
.IR hbw_allocate_memalign_psize ()
returns NULL.  The memory returned will be allocated using pages
determined by the
.IR "psize"
variable which may be one of the following enumerated values:
.TP
.B HBW_PAGESIZE_4KB
The four kilobyte page size option. Note that with transparent huge pages
enabled these allocations may be promoted by the operating system to
two megabyte pages.
.TP
.B HBW_PAGESIZE_2MB
The two megabyte page size option.
.PP
.BR hbw_is_available ()
returns 1 if high bandwidth memory is available and 0 otherwise.
.PP
.BR hbw_get_policy ()
returns the current fallback policy when insufficient high bandwith
memory is available.
.PP
.BR hbw_set_policy ()
set the current fallback policy, the policy can be modified only once
in the life of an application.
.TP
.B HBW_POLICY_BIND
If insufficient high bandwidth memory pages are available a
segmentation fault will be raised when memory is touched (default).
.TP
.B HBW_POLICY_PREFERRED
If insufficient high bandwidth memory pages are available fall back on
standard memory pages.
.SH "RETURN VALUE"
.BR hbw_get_policy ()
returns
.B HBW_POLICY_BIND
or
.B HBW_POLICY_BIND
which represents the current high bandwidth policy.
.BR hbw_set_policy ()
and
.BR hbw_free ()
do not have return values.
.BR hbw_malloc ()
.BR hbw_calloc ()
and
.BR hbw_realloc ()
return the pointer to the allocated memory, or NULL if the request
fails.
.BR hbw_allocate_memalign ()
and
.BR hbw_allocate_memalign_psize ()
return zero on success, or one of the error values listed in the
next section on failure.  Note that
.I errno
is not set.
.SH ERRORS
.TP
.B NUMAKIND_ERROR_UNAVAILABLE
Requested numa kind is not available
.TP
.B NUMAKIND_ERROR_MBIND
Call to mbind() failed
.TP
.B NUMAKIND_ERROR_MEMALIGN
Call to posix_memalign() failed
.TP
.B NUMAKIND_ERROR_MALLCTL
Call to je_mallctl() failed
.TP
.B NUMAKIND_ERROR_MALLOC
Call to je_malloc() failed
.TP
.B NUMAKIND_ERROR_GETCPU
Call to sched_getcpu() returned out of range
.TP
.B NUMAKIND_ERROR_HBW
Initializing for HBW failed
.TP
.B NUMAKIND_ERROR_PMTT
Unable to find parsed PMTT table in
.I /etc/numakind/node-bandwidth
.TP
.B NUMAKIND_ERROR_TIEDISTANCE
Two NUMA memory nodes are equidistant from target cpu node
.TP
.B NUMAKIND_ERROR_ALIGNMENT
Alignment must be a power of two and larger than sizeof(void *)
.TP
.B NUMAKIND_ERROR_ALLOCM
Call to je_allocm() failed
.TP
.B NUMAKIND_ERROR_ENVIRON
Error parsing environment variable (NUMAKIND_*)
.SH "NOTES"
The
.I hbwmalloc.h
file defines the external functions and enumerations for the hbwmalloc
library. These interfaces define a heap manager that targets high
bandwidth memory numa nodes.
.SH "FILES"
.TP
.I /etc/numakind/node-bandwidth
File that contains the bandwidth values for each numa node.
.TP
.I /etc/rc/d/init.d/numakind
Initialization script that creates the node-bandwidth file by calling
the PMTT table parser.
.TP
.I /usr/sbin/numakind-pmtt
The PMTT table parser.

.SH "ENVIRONMENT"
.TP
.B NUMAKIND_HBW_NODES
This environment varaible is a comma separated list of NUMA nodes that
are treated as high bandwidth. This environment variable should be set
if the PMTT file is not present, or to override the PMTT table if it
is present. Uses same parser as numactl, so syntax defined in numactl
man pages applies: e.g 1-3,5 is a valid setting.
.SH "SEE ALSO"
.BR malloc (3),
.BR numa (3),
.BR numactl (8),
.BR mbind (2),
.BR mmap (2),
.BR move_pages (2)
