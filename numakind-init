#!/bin/bash
#
#
#  Copyright (2014) Intel Corporation All Rights Reserved.
#
#  This software is supplied under the terms of a license
#  agreement or nondisclosure agreement with Intel Corp.
#  and may not be copied or disclosed except in accordance
#  with the terms of that agreement.
#
#
# This shell script takes care creating and deleting accesible
# bandwidth files from PMTT tables
### BEGIN INIT INFO
# Provides: numakind
# Required-Start:
# Required-Stop:
# Short-Description: Sets up numakind library
# Description: Parses the PMTT table and creates the file /etc/numakind/node-bandwidth.
#
#              start - Create bandwidth file from PMTT table.
#
#              stop  - Delete bandwidth file from /etc/numakind.
#
#              restart - Delete and recreate bandwidth file from PMTT table.
#
#              force-reload - Delete and recreate bandwidth file.  Ignore deletion errors.
#
#              status - Print existance of bandwidth file
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
### END INIT INFO

# test if this is an LSB system
if [ -d /usr/lib/lsb ]; then
    IS_LSB=1
else
    IS_LSB=0
fi

if [ $IS_LSB ]; then 
    test -s /etc/rc.status && \
        . /etc/rc.status
    echo_success() {
        echo $1
        rc_failed 0
        rc_status -v1
    }
    echo_failure() {
        echo $1
        rc_failed 1
        rc_status -v1
    }
else
    test -s /etc/rc.d/init.d/functions && \
        . /etc/rc.d/init.d/functions
fi

err=0
FILE=/etc/numakind/node-bandwidth
DIR=`dirname $FILE`
NUMAKIND_BIN=/usr/sbin/numakind-pmtt
umask 133

start() {
    echo_success "creating bandwidth values file"
    $NUMAKIND_BIN
    err=$?
    if [ $err -eq 0 ] && [ -f $FILE ]
    then
        echo_success "created file: $FILE"
    else
        echo_failure "could not create file: $FILE"
    fi
}

stop() {
    echo_success "deleting bandwidth values file"
    rm $FILE
    err=$?
    if [ $err -eq 0 ] && [ ! -f $FILE ]
    then
        echo_success "deleted file: $FILE"
        rmdir $DIR
        err=$?
        if [ $err -eq 0 ] && [ ! -d $DIR ]
        then
            echo_success "deleted directory: $DIR"
        else
            echo_failure "could not delete directory: $DIR"
        fi
    else
        echo_failure "could not delete file: $FILE"
    fi
}

restart() {
    stop
    if [ $err -eq 0 ]
    then
        start
    fi
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    force-reload)
        stop
        start
        ;;
    status)
        if [ -f $FILE ];
        then
            echo_success "file $FILE exists"
            err=0
        else
            echo_failure "file $FILE does not exists"
            err=3
        fi
        ;;
    condrestart|try-restart)
        restart
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|status|condrestart|try-restart}"
        err=2
esac
exit $err
