diff --git a/debug.patch b/debug.patch
index cc4cdf9..e69de29 100644
--- a/debug.patch
+++ b/debug.patch
@@ -1,13 +0,0 @@
-diff --git a/make_rpm.mk b/make_rpm.mk
-index e47fbf6..706ce52 100644
---- a/make_rpm.mk
-+++ b/make_rpm.mk
-@@ -4,7 +4,7 @@ gitrev ?= $(shell git rev-parse --abbrev-ref HEAD)
- specfile = $(topdir)/SPECS/jemalloc-$(version).spec
- source_tar = $(topdir)/SOURCES/jemalloc-$(version).tar.gz
- 
--configure_flags = --enable-autogen --with-jemalloc-prefix=je_ --enable-memkind
-+configure_flags = --enable-autogen --with-jemalloc-prefix=je_ --enable-memkind --enable-debug
- 
- include make.spec
- 
diff --git a/make_rpm.mk b/make_rpm.mk
index fe161d4..b2c7692 100644
--- a/make_rpm.mk
+++ b/make_rpm.mk
@@ -14,7 +14,7 @@ src  = $(shell cat MANIFEST)
 rpmbuild_flags = -E '%define _topdir $(topdir)' -E '%define configure_flags $(configure_flags)'
 rpmclean_flags = $(rpmbuild_flags) --clean --rmsource --rmspec
 
-configure_flags = --enable-autogen --with-jemalloc-prefix=je_ --enable-memkind
+configure_flags = --enable-autogen --with-jemalloc-prefix=je_ --enable-memkind --enable-debug
 
 include make.spec
 
diff --git a/src/chunk.c b/src/chunk.c
index 33db7db..61252c2 100644
--- a/src/chunk.c
+++ b/src/chunk.c
@@ -41,6 +41,110 @@ static void	chunk_record(extent_tree_t *chunks_szad,
 
 /******************************************************************************/
 
+void print_node(extent_node_t *node)
+{
+    fprintf(stderr, "kind=%u    size=%llu    addr=%p\n", node->partition, node->size, node->addr);
+}
+
+
+static void pretty_print_szad(extent_node_t *node, char *indent, bool last)
+{
+    extent_node_t *lnode;
+    extent_node_t *rnode;
+    char my_indent[8192] = {0};
+
+    strcpy(my_indent, indent);
+
+    fprintf(stderr, indent);
+    if (last) {
+        fprintf(stderr, "\\-");
+        strcat(my_indent, "  ");
+    }
+    else {
+        fprintf(stderr, "|-");
+        strcat(my_indent, "| ");
+    }
+    print_node(node);
+
+    lnode = rbtn_left_get(extent_node_t, link_szad, node);
+    lnode = (lnode == node) ? NULL : lnode;
+    rnode = rbtn_right_get(extent_node_t, link_szad, node);
+    rnode = (rnode == node) ? NULL : rnode;
+    if (rnode) {
+        last = (lnode == NULL);
+        pretty_print_szad(rnode, my_indent, last);
+    }
+    if (lnode) {
+        last = true;
+        pretty_print_szad(lnode, my_indent, last);
+    }
+}
+
+static void pretty_print_ad(extent_node_t *node, char *indent, bool last)
+{
+    extent_node_t *lnode;
+    extent_node_t *rnode;
+    char my_indent[8192] = {0};
+
+    strcpy(my_indent, indent);
+    fprintf(stderr, my_indent);
+    if (last) {
+        fprintf(stderr, "\\-");
+        strcat(my_indent, "  ");
+    }
+    else {
+        fprintf(stderr, "|-");
+        strcat(my_indent, "| ");
+    }
+    print_node(node);
+
+    lnode = rbtn_left_get(extent_node_t, link_ad, node);
+    lnode = (lnode == node) ? NULL : lnode;
+    rnode = rbtn_right_get(extent_node_t, link_ad, node);
+    rnode = (rnode == node) ? NULL : rnode;
+    if (rnode) {
+        last = (lnode == NULL);
+        pretty_print_ad(rnode, my_indent, last);
+    }
+    if (lnode) {
+        last = true;
+        pretty_print_ad(lnode, my_indent, last);
+    }
+
+}
+
+void print_tree(extent_tree_t *tree)
+{
+    extent_node_t *node;
+    extent_node_t *last;
+    return;
+
+    /* FIXME doesn't work*/
+    last = extent_tree_szad_last(tree);
+    for (node = extent_tree_szad_first(tree);
+         node != last;
+         node = extent_tree_szad_next(tree, node)) {
+        print_node(node);
+    }
+}
+
+void pretty_print_all(void)
+{
+    char indent[8192] = {0};
+    fprintf(stderr, "chunks_szad:\n");
+    //print_tree(&chunks_szad_mmap);
+    fprintf(stderr, "\n");
+    pretty_print_szad(chunks_szad_mmap.rbt_root, indent, true);
+
+    indent[0] = '\0';
+    fprintf(stderr, "\nchunks_ad:\n");
+    //print_tree(&chunks_ad_mmap);
+    fprintf(stderr, "\n");
+    pretty_print_ad(chunks_ad_mmap.rbt_root, indent, true);
+    fprintf(stderr, "\n--------------------\n");
+}
+
+
 static void *
 chunk_recycle(extent_tree_t *chunks_szad, extent_tree_t *chunks_ad, size_t size,
     size_t alignment, bool base, bool *zero, unsigned partition)
@@ -51,6 +155,8 @@ chunk_recycle(extent_tree_t *chunks_szad, extent_tree_t *chunks_ad, size_t size,
 	size_t alloc_size, leadsize, trailsize;
 	bool zeroed;
 
+        pretty_print_all();
+
 	if (base) {
 		/*
 		 * This function may need to call base_node_{,de}alloc(), but
