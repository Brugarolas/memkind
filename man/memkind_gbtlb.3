.\"
.\" Copyright (C) 2014 Intel Corporation.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\" 1. Redistributions of source code must retain the above copyright notice(s),
.\"    this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright notice(s),
.\"    this list of conditions and the following disclaimer in the documentation
.\"    and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY EXPRESS
.\" OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
.\" EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
.\" OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.TH "MEMKIND_GBTLB" 3 "2014-09-22" "Intel Corporation" "MEMKIND_GBTLB" \" -*- nroff -*-
.SH "NAME"
memkind_gbtlb.h \- gigabyte tlb memkind operations.
.SH "SYNOPSIS"
.nf
.B #include <memkind_gbtlb.h>
.sp
.B Link with -ljemalloc -lnuma -lpthread -lmemkind
.sp
.BI "void *memkind_gbtlb_malloc(struct memkind " "*kind" ", size_t " "size" );
.BI "void *memkind_gbtlb_calloc(struct memkind " "*kind" ", size_t " "num" ", size_t " "size" );
.BI "int memkind_gbtlb_posix_memalign(struct memkind " "*kind" ", void " "**memptr" ", size_t " "alignment" ", size_t " "size" );
.BI "void *memkind_gbtlb_realloc(struct memkind " "*kind" ", void " "*ptr" ", size_t " "size" );
.BI "void memkind_gbtlb_free(struct memkind " "*kind" ", void " "*ptr" );
.BI "int memkind_gbtlb_get_mmap_flags(struct memkind " "*kind" ", int " "*flags" );
.BI "int memkind_gbtlb_check_addr(struct memkind " "*kind" ", void " "*addr" );
.SH DESCRIPTION
Gigabyte tlb implementations for memkind operations.
Hugetlbfs provides a way to allocate a pool of gigabyte pages from the
operating system. These routines help to allocate memory using
gigabyte pages.
.br
The main difference in the implementation of gigabyte pages in comparison
to the other memkind kinds, is that it is not backed by a heap manager like
jemalloc. There are two reasons we chose this approach.
.br
1. Gigabyte pages are expensive and limited and buffering with a heap manager, will not be helpful.
.br
2. Atleast currently, its mostly for power users who understand the advantage of using large gigabyte pages, no strong motivation for making it a general purpose solution.
.br
.br
.TP
.BR REQUIRED:
To allocated gigabyte pages from the operating system. This can be done
by specifying
.BI "hugepagesz=1G nr_hugepages=N"
on  the kernel commandline. From
.BR 3.16
and later kernels, users can allocate gigabyte pages like its done for
2MB pages. i.e
.BI "echo no_pages > /proc/sys/vm/nr_hugepages"
.br
.br
.SH IMPLEMENTATION DETAILS:
The Gigabyte pages are fetched with the help of the
.BR MAP_HUGE_1GB
flag of mmap. Since the implementation is not backed by an allocator.

.br
.br
.BR memkind_store()
implements a hash table with a hash value calculated using the
.BR crc32
SIMD instruction which returns
.BI crc + CRC-32C(v)
where v is the virtual address pointer. This hash table is used to
store the virtual address for retieval and freeing. The table,
stores the requested size, allocated size, the virtual address pointer
and the mmaped address pointer information.

.br
Implementation of all the memkind apis are done by using mmap, mbind
and allocation information is saved in the hash store.

.br
Differentiation between STRICT and REGULAR gbtlb implementation are
done with the help of the
.BR memkind_gbtlb_ceil_size
function which ceils the size if the requested size is not a modulo
of 1GB.

.br
.BR memkind_gbtlb_check_addr
function looks in the gbtlb hash table to see if the virtual address
was allocated with GB pages. This feature is used in determining the
kind for reallocing in the hbw_realloc implementation.


.SH NOTE:
.BR memkind_gbtlb_realloc
is special, as it allows to use the same
page that was fetched. Since this implemetation of gigabyte pages
is not backed by an actual heap manager like other kinds (which
use jemalloc), each allocation request would fetch a gigabyte page.
So when a realloc is called on a virtual address pointer backed by
a GB page which has not been completely used, and if the current
request including previous request does not exceed a GB, no more
pages are allocated. To summarize, realloc implementation of MEMKIND_GBTLB
guarantees that gigabyte pages get allocated when its actually needed.

.br
.br

.BR memkind_gbtlb_free
is a little different from the free of the other kinds. Since the other
kinds are backed by jemalloc, a free will recycle the pages in recycle
pools maintained by jemalloc, in the case of the gbtlb, the pages are actually
returned to the operating system.
.SH "COPYRIGHT"
Copyright (C) 2014 Intel Corporation. All rights reserved.
.SH "SEE ALSO"
.BR memkind (3),
.BR memkind_arena (3),
.BR memkind_default (3),
.BR memkind_hbw (3),
.BR memkind_hugetlb (3),
.BR jemalloc (3),
.BR mbind (2),
.BR mmap (2)
